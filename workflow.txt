SetUp : 
    - npm init
    - npm i express : for server building
    - npm i mongoose : to connect to database.

    index.js file

    Make folders:
        -routes
            url.js
        -models
            url.js
        -controllers
            url.js (async function hota h isme)

    install nonoid from web
        npm i nanoid

---------------------------------------------------------

/ server-side rendering  engines : EJS, PUG etc.
    - npm i EJS
        (The .ejs extension indicates that it's a template file for the EJS (Embedded JavaScript) templating engine.)
    
    //index.js
    - Set the engine
        app.set('view engine', 'ejs');

    - set the path to module to render
        app.set('views', path.join(__dirname, 'views'));

    - create hoem.ejs  file in views folder
        Important : To work with this file, static Router.js file is required.


    - create staticRouter.js file to handle home.ejs file in views.
         res.render('filename', {data}) : data is object

    working: When a request is made to the server, the server will render 
             the home.ejs template file by injecting dynamic data into it, using the EJS templating engine.


------------------------------------------------------------------------------------------------------

Authentication Workflow:

1. create a new collection to add Authentication data to database    
    -   for that create a new model 'user.js'.
    -   create a new route 'user.js'.
    -   create a new controller 'user.js' to handle user registration and login.

2. import the route as userRoute in index.js file.

3. create a signup.ejs file  in views folder.
            - create a signup route in StaticRouter file.
                - redirect to home page if user signed Up.

4. create a login.ejs file  in views folder.
            - create a login route in StaticRouter file.
                - redirect to home page if successful login.

    We need to create a unique Id called session ID for each user.
    We can use a library called 'uuid' for this.

5.  Set User Session :
        - import uuid in Contoller/user.js  file.
        - Now use uuid to generate a unique session id for each logged in user.
              
        - create a folder 'service'
            create a file 'auth.js'.
                - Create a map function 'sessionIdToUserMap'.
                - create a function getUser
                - create a function setUser

            >   NOTE: -------------------------------------------------  
                    1.      sessionToUseMap is not shown in the code snippet,
                            but it's likely a map that stores sessionIds as keys and
                            associated user objects as values.

                    2.      setUser  (from ../service/auth) stores the sessionId and
                            associated user in a session map
                ------------------------------------------------------------

        -   import  {setUser}  from '../service/auth' in controller/user.js file.
                -  use setUser to set user session.
                


6. Set Cookie :
            The sessionId is set as a cookie named uid 
            in the user's browser using :
            
                res.cookie('uid', sessionId)

7. Ab simple h, bas hume middleware bana kr cookie ke value leni h,
        - create a middlewares folder
            - create a file 'auth.js'.
                - create a async function 'restrictedToLoggInUserOnly()'.

                - validate krna h user ko using cookies details:
                    -   use req.cookies.uid | to get the sessionId from the cookie.
                    -   use getUser function from auth.js | to get the user associated with the sessionId.
                    -   if user is not found | return a 401 status code | redirect to login page.
                    -    if user is found | proceed with the request.
                            set :
                            req.user = user; |  to set the user in the request object.
                            next();          | to proceed with the next middleware in the stack. 

        - install cookies-parser
        - import cookieParser from 'cookies-parser' in index.js file and use it.
        - import restrictedToLoggInUserOnly from middleware/auth.js in index.js file and use it to any route that needs to be protected.


8.  We want to display only those urls that are generated by the logged in user only.
    Urls generated by other user should not be displayed to others.

    - add a new property  to url Schema :
        -   type : mongoose.Schema.Types.ObjectId,
        -   ref : 'user',
    
    -   add a new async function 'checkAuth' to just check the if user if logged in.
    -   use checkAuth middleware with staticRouter route.

    -   In staticRouter.js file :

        -   use req.user to get the user associated with the request.
        -   use req.user._id to get the id of the user associated with the request.
        -   use mongoose.model('user').findById(req.user._id) to get the user object.
        
       
    














    
    
        
        